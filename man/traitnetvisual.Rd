% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/traitnetvisual.R
\name{traitnetvisual}
\alias{traitnetvisual}
\title{Plot a trait preference network}
\usage{
traitnetvisual(net, traitclasses, preftypes, linktype, wvals, traitvals)
}
\arguments{
\item{net}{The network adjacency matrix to be plotted}

\item{traitclasses}{A vector of strings indicating the trait class for each trait ('cate' or 'cont'; see Details)}

\item{preftypes}{A vector of strings indicating the preference type used with each trait ('sim', or 'pop'; see Details)}

\item{linktype}{A string indicating the type of link ('stow', 'detw', or 'unw'; see Details)}

\item{wvals}{A vector with the importance (weight) of each trait-preference combination}

\item{traitvals}{A matrix with a column of trait values for each trait, and a row for each individual. Can be a vector if there is only a single trait}
}
\value{
A plot of a network.
}
\description{
\code{traitnetvisual()} makes a plot of a trait preference network,
where the node sizes correspond to trait values for the popularity trait (if any) with the highest importance,
and the node colours correspond to trait values for the similarity trait (if any) with the highest importance.
}
\details{
All the arguments (other than \code{net}) must be the ones that were used for the creation of input network, otherwise the visualization will be misleading.
A safer option is to use \code{traitnet()}, which can produce a network plot together with a network matrix.

The node size is based on the popularity trait (if any) with highest weight (wval value).
The node colour is based on the similarity trait (if any) with highest weight (wval value).
To make a nice visualization, the average node size is adjusted based on the number of nodes,
and the link width is adjusted based on whether the network is weighted or not.
The layout itself is done with \code{igraph} plotting.

About \code{net}:
\itemize{
\item The network matrix must be undirected and symmetric, with zeros in the diagonal.
}

About \code{traitclasses}:
\itemize{
\item 'cate' indicates a categorical trait.
\item 'cont' indicates a continuous trait.
}

About \code{preftypes}:
\itemize{
\item There are two preference types: 'similarity' and 'popularity' (as described in Brask et al., see References).
\item 'sim' indicates that individuals prefer others that are similar to themselves in terms of the trait.
\item 'pop' indicates that individuals with high trait values are preferred (popular).
}

About \code{linktype}:
\itemize{
\item 'unw' gives unweighted (binary) links. Existing links are indicated with the value 1, non-existing links are indicated with 0.
\item 'stow' gives weighted links with stochasticity, where the weights are drawn from distributions with the social attraction values as means.
\item 'detw' gives deterministic weighted links, where the weight equals the social attraction of the dyad.
For weighted links, the link weights are in the interval [0,1], and existing links have a minimum weight of 0.001.
}

About \code{wvals}:
\itemize{
\item The sum of the \code{wval} vector, and each value in the vector, must lie in the interval [0,1], where 0 indicates no importance and 1 indicates full importance.
}

About \code{traitvals}:
\itemize{
\item The trait values must fit with the trait classes given in the \code{traitclasses} argument.
\item Categorical trait values should consist of integers that each indicates a category.
\item Continuous trait values should consist of numbers between 0 and 1. Empirical trait values on other scales should be transformed to this scale before being used.
}
}
\examples{

# Here we first make a trait preference network by using `traitvals()`,
# `sociatvals()` and `traitnetbuild()`, and then we visualize it.
# This is not a recommended procedure, as you can make and visualize a trait
# preference network with the `traitnet()` function alone, which is safer.

# set arguments
n <- 100
k <- 10
traittype <- 'cate'
ncats <- 5
traitclasses <- 'cate'
preftypes <- 'sim'
wvals <- 0.95
linktype <- 'stow'

# create the network
traitvals <- traitvalues(n = 100, traittype = 'cate', ncats = 5)
sociatvals <- traitnetsociat(traitclasses, preftypes, wvals, traitvals)
net <- traitnetbuild(n, k, linktype, sociatvals)

#visualize the network
traitnetvisual(net, traitclasses, preftypes, linktype, wvals, traitvals)
}
\references{
\url{https://arxiv.org/abs/2303.08107}
}
\seealso{
\code{\link{traitnet()}}
}
\author{
Josefine Bohr Brask, \email{bohrbrask@gmail.com}
}
