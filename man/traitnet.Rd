% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/traitnet.R
\name{traitnet}
\alias{traitnet}
\title{Generate a network based on the trait preference model}
\usage{
traitnet(
  n,
  k,
  traittypes,
  allncats,
  preftypes,
  linktype,
  wvals,
  onecomp,
  visnet,
  owntraitclasses = NULL,
  owntraitvals = NULL
)
}
\arguments{
\item{n}{An integer indicating the number of individuals (network nodes)}

\item{k}{An integer indicating the average degree (average number of links connected to each node)}

\item{traittypes}{A vector of strings indicating the trait type for each trait ('cate', 'tnorm', 'ranks', or 'own'; see Details)}

\item{allncats}{A vector of integers indicating the number of categories for each trait (numbers for non-categorical traits are not used and may be set to NA, but must be included in the vector)}

\item{preftypes}{A vector of strings indicating the preference type to be used with each trait ('sim', or 'pop'; see Details)}

\item{linktype}{A string indicating the type of link ('stow', 'detw', or 'unw'; see Details)}

\item{wvals}{A vector with the importance (weight) of each trait-preference combination}

\item{onecomp}{Logical. If TRUE then the generated network will have all the nodes in a single component (i.e. at least indirectly connected). If FALSE then the generated network may consist of more than one component}

\item{visnet}{Logical. If TRUE then a plot of the network is made. If false then no plot is made (see also Value below)}

\item{owntraitclasses}{A vector of strings indicating the trait class for each trait for which trait values are provided by the user ('cate' or 'cont'; see Details)}

\item{owntraitvals}{A matrix with a column with trait values for traits where trait values are provided by the user (can be a vector if there is only a single trait)}
}
\value{
A list containing the following:
\itemize{
\item \code{net}: the network matrix
\item \code{traitnetplot}: a plot of the network (only if \code{visnet} = TRUE)
\item \code{traitvals}: a matrix with all the trait values (both generated and user-supplied)
\item \code{sociatvals}: a vector with a social attraction value for each dyad
}
}
\description{
\code{traitnet()} makes a network matrix (and if desired a plot of the network), based on the trait preference model.
}
\details{
This function can be considered both as a tool to generate networks based on social preferences for traits (node attributes),
And as a tool to generate networks with specific structural properties (potentially disregarding the preference interpretation).

The function can create networks going from randomly structured to strongly influenced by trait preferences.
One or more traits, and different types of social preferences, can influence the network structure.
The trait values of individuals can be simulated (based on different trait types), or given as input by the user.
The traits (and thereby also the preference types) can vary in their importance (their influence on the structure).

Network structures that can be generated include random, modular, assorted (with or without modularity), centralized, and mixes of these in any ratio.
\itemize{
\item Popularity preferences give centralization.
\item Similarity preferences with categorical traits give modularity and trait assortativity.
\item Similarity preferences with continuous traits give assortativity (without modularity).
}

For details about how the trait preference model generates networks, see Brask et al. in References below.
Briefly, the model calculates a social attraction value for each pair of individuals, based on their trait values
and the social preference type and importance (weight) given for each trait. From this, a network is constructed where pairs
with higher social attraction have a higher chance of getting a link.

The \code{traittypes}, \code{allncats}, \code{preftypes}, and \code{wvals} arguments must fit together in terms of order (and have the same length),
because the function assumes that the entries in the same place in these vectors fit together.
For example, the first trait type in the \code{traittypes} vector will be used with the first preference type in the \code{preftypes} vector,
the first importance value in the \code{wvals} vector, and the first category number (which may be NA) in the \code{allncats} vector.

About \code{traittypes}:
\itemize{
\item 'cate'  gives categorical trait values. The values consist of the integers from 1 to \code{ncats}, which each indicates a category. Each category is drawn with the same probability.
\item 'tnorm' gives normally distributed trait values (truncated). The values are drawn from a truncated normal distribution that lie in the interval [0,1], with mean = 0.5 and standard deviation = 0.25.
\item 'ranks' gives trait values indicating ranks (e.g. social rank). The values are equally distributed in the interval [0,1]. This corresponds to ranks indicated by integers from 1 to \code{n}, transformed to the interval [0,1].
\item 'own' must be given for any trait where trait values are given as input by the user. For such traits, the class needs to be specified in the \code{owntraitclasses} argument.
}

About \code{preftypes}:
\itemize{
\item There are two preference types: 'similarity' and 'popularity' (as described in Brask et al., see References).
\item 'sim' indicates that individuals prefer others that are similar to themselves in terms of the trait.
\item 'pop' indicates that individuals with high trait values are preferred (popular).
}

About \code{linktype}:
\itemize{
\item 'unw' gives unweighted (binary) links. Existing links are indicated with the value 1, non-existing links are indicated with 0.
\item 'stow' gives weighted links with stochasticity, where the weights are drawn from distributions with the social attraction values as means.
\item 'detw' gives deterministic weighted links, where the weight equals the social attraction of the dyad.
\item For weighted links, the link weights are in the interval [0,1], and existing links have a minimum weight of 0.001.
}

About \code{wvals}:
\itemize{
\item The sum of the \code{wval} vector, and each value in the vector, must lie in the interval [0,1], where 0 indicates no importance and 1 indicates full importance.
}

About \code{visnet}:
\itemize{
\item The node size is based on the popularity trait (if any) with highest w value (importance). The node colour is based on the similarity trait (if any) with highest w value (importance).
}

About \code{owntraitvals} and \code{owntraitclasses}:
\itemize{
\item These arguments should only be given if the user wants to provide trait values for one or more of the traits (for example real-world trait values).
}

About \code{owntraitvals}:
\itemize{
\item If the user provides trait values for more than one trait, then \code{owntraitvals} must have one column for each of these traits, and \code{n} rows.
If the user provides trait values for a single trait then \code{owntraitvals} can be a vector of length \code{n} or a matrix with \code{n} rows and 1 column.
Categorical trait values should consist of integers that each indicates a category.
Continuous trait values should consist of numbers between 0 and 1, and empirical trait values on other scales should be transformed to this scale before being used.
The trait values must fit with the trait classes given in the \code{owntraitclasses} argument.
}

About \code{owntraitclasses}:
\itemize{
\item Give 'cate' for categorical traits.
\item Give 'cont' for continuous traits.
}
}
\examples{

# A network based on two traits with popularity and similarity preferences,
# respectively (this corresponds to the minimal version of the trait preference
# model, see References):

traitnet(n=100, k=10, traittypes = c('cate', 'tnorm'), allncats = c(5, NA),
preftypes = c('sim', 'pop'), linktype = 'stow', wvals = c(0.5, 0.5),
onecomp = TRUE, visnet = TRUE)


# The same as the above example, but where the categorical similarity trait is of
# high importance and the other trait (with popularity) of no importance:

traitnet(n=100, k=10, traittypes = c('cate', 'tnorm'), allncats = c(5, NA),
preftypes = c('sim', 'pop'), linktype = 'stow', wvals = c(0.9, 0),
onecomp = TRUE, visnet = TRUE)


# An example with three traits, where we specify the arguments before the call,
and we store the network matrix afterwards:

n <- 100
k <- 10
linktype <- 'stow'
traittypes <- c('cate', 'tnorm', 'ranks')
allncats <- c(5, NA, NA)
preftypes <- c('sim', 'pop', 'sim')
wvals <- c(0.5, 0.1, 0.3)

traitnetoutput <- traitnet(n=100, k=10, traittypes = traittypes, allncats = allncats,
preftypes = preftypes, linktype = linktype, wvals = wvals, onecomp = TRUE,
visnet = TRUE)

thenet <- traitnetoutput$net


# An example with two traits, where the trait values are input by the user.
# (for the example, the trait values are simulated (before the call),
# but empirical trait data can be input in the same way):

n <- 100
k <- 10
linktype <- 'stow'
traittypes <- c('own', 'own')
allncats <- c(NA, 2)
preftypes <- c('pop', 'sim')
wvals <- c(0.1, 0.85)
owntraitvals <- cbind(sample(100)/100, sample(1:2,100, replace = T))
owntraitclasses <- c('cont', 'cate')

traitnet(n=100, k=10, traittypes = traittypes, allncats = allncats,
preftypes = preftypes, linktype = linktype, wvals = wvals, onecomp = TRUE,
visnet = TRUE, owntraitclasses = owntraitclasses, owntraitvals = owntraitvals)
}
\references{
\url{https://arxiv.org/abs/2303.08107}
}
\seealso{
\code{\link{traitnetsmetrics()}}
}
\author{
Josefine Bohr Brask, \email{bohrbrask@gmail.com}
}
